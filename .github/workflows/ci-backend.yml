name: Backend CI

on:
  push:
    branches:
      - "**"
    paths:
      - 'backend/**'
      - .github/workflows/ci-backend.yml

jobs:
  qa:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Configure cache
        id: python-cache
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux') && ${{ !env.ACT }}
        with:
          path: |
            ${{ env.pythonLocation}}
          key: v2-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
      - name: Install deps using Pip
        run: pip install -r requirements-dev.txt
        if: steps.python-cache.outputs.cache-hit != 'true'
      - name: Run linting checks
        run: |
          isort scaife_stack_atlas -rc --check-only
          black scaife_stack_atlas --check
          flake8 scaife_stack_atlas
      - name: Run tests
        run: pytest
  # TODO: split apart base images, data image, and app image
  build-and-push-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    # TODO: Implement re-usable workflows so that
    # - We run QA and deploy if QA passes
    # - If QA fails, we can still override the deployment
    # see https://docs.github.com/en/actions/using-workflows/reusing-workflows
    # and https://stackoverflow.com/a/70542459 for more ideas
    # needs: [qa]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prep Tag Data
        id: tags
        run: |
          export REF=${GITHUB_REF#refs/*/};
          export VERSION=${REF//[^[:alpha:][:digit:]\.\-\_]/};
          echo "::set-output name=version::$VERSION";
          echo "::set-output name=minor::${VERSION%.*}.x";
          echo "::set-output name=major::${VERSION%.*.*}.x.x";
          echo "::set-output name=sha7::${GITHUB_SHA::7}";

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Login to GH Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Revisit use of :latest in favor of branch based builds;
      # if a cache-from directive is missing, we don't get the benefits of any of them.
      - name: Build frontend
        uses: docker/build-push-action@v2
        with:
          context: ./
          builder: ${{ steps.buildx.outputs.name }}
          file: heroku.dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/frontend-build:latest
          cache-to: type=inline
          target: frontend-build
          tags:
            ghcr.io/${{ github.repository }}/frontend-build
      - name: Build backend
        uses: docker/build-push-action@v2
        with:
          context: ./
          builder: ${{ steps.buildx.outputs.name }}
          file: heroku.dockerfile
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/backend-build:latest
          cache-to: type=inline
          target: backend-build
          tags:
            ghcr.io/${{ github.repository }}/backend-build
      - name: Prepare backend
        uses: docker/build-push-action@v2
        with:
          context: ./
          builder: ${{ steps.buildx.outputs.name }}
          file: heroku.dockerfile
          push: true
          cache-from:
            type=registry,ref=ghcr.io/${{ github.repository }}/backend-build:latest
            type=registry,ref=ghcr.io/${{ github.repository }}/backend-prep:latest
          cache-to: type=inline
          target: backend-prep
          tags:
            ghcr.io/${{ github.repository }}/backend-prep
      - name: Prepare deploy artifact
        uses: docker/build-push-action@v2
        with:
          context: ./
          builder: ${{ steps.buildx.outputs.name }}
          file: heroku.dockerfile
          push: true
          cache-from:
            type=registry,ref=ghcr.io/${{ github.repository }}/frontend-build:latest
            type=registry,ref=ghcr.io/${{ github.repository }}/backend-build:latest
            type=registry,ref=ghcr.io/${{ github.repository }}/backend-prep:latest
            type=registry,ref=ghcr.io/${{ github.repository }}/webapp:latest
          cache-to: type=inline
          target: webapp
          tags:
            ghcr.io/${{ github.repository }}/webapp

# TODO: Docker file tweaks
